const http = require('http');
const cluster = require('cluster');
const helpers = require('../utils/helperMethods');
const app = require('../index'); // The express app we just created


/* Setup number of worker processes to share port which will be defined while setting up server
 */
const workers = [];
const setupWorkerProcesses = () => {
  // to read number of cores on system
  const numCores = require('os').cpus().length;
  console.log(`Master cluster setting up ${numCores} workers`);

  // iterate on number of cores need to be utilized by an application
  // current example will utilize all of them
  for (let i = 0; i < numCores; i++) {
    // creating workers and pushing reference in an array
    // these references can be used to receive messages from workers
    workers.push(cluster.fork());

    // to receive messages from worker process
    workers[i].on('message', (message) => {
      console.log(message);
    });
  }

  // process is clustered on a core and process id is assigned
  cluster.on('online', (worker) => {
    console.log(`Worker ${worker.process.pid} is listening`);
  });

  // if any of the worker process dies then start a new one by simply forking another one
  cluster.on('exit', (worker, code, signal) => {
    console.log(`Worker ${worker.process.pid} died with code: ${code}, and signal: ${signal}`);
    console.log('Starting a new worker');
    cluster.fork();
    workers.push(cluster.fork());
    // to receive messages from worker process
    workers[workers.length - 1].on('message', (message) => {
      console.log(message);
    });
  });
};
const setupServer = () => {
  const port = parseInt(process.env.PORT, 10) || 8000;
  // app.set('port', port);
  const server = http.Server(app);
  server.listen(port);
  console.log(`app started on port ${port}`);
};

const startServer = (isClusterRequired) => {
  // if it is a master process then call setting up worker process
  if (isClusterRequired && cluster.isMaster) {
    setupWorkerProcesses();
  } else {
    // to setup server configurations and share port address for incoming requests
    setupServer();
  }
};

startServer(true);
